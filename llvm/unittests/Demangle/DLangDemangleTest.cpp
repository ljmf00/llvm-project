//===------------------ DLangDemangleTest.cpp -----------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// Testing input ported from libiberty library.
//
//===----------------------------------------------------------------------===//

#include "llvm/Demangle/Demangle.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

#include <cstdlib>

TEST(DLangDemangle, Success) {
  struct ExpectedVal {
    const char *Mangled;
    const char *Expected;
  };

  ExpectedVal ExpectedArray[] = {
      {"_Dmain", "D main"},
      {"_D3app4mainFZ6dg_fooMFZi", "app.main().dg_foo()"},
      {"_D3app6foobarFPiAiHiieSQv3FooSQBc3BarZi",
       "app.foobar(int*, int[], int[int], real, app.Foo, app.Bar)"},
      {"_D8demangle4testPFLAiYi", "demangle.test"},
      {"_D8demangle4testFZv", "demangle.test()"},
      {"_D8demangle4testMFZ2fnMFZv", "demangle.test().fn()"},
      {"_D8demangle4testFaZv", "demangle.test(char)"},
      {"_D8demangle4testFbZv", "demangle.test(bool)"},
      {"_D8demangle4testFcZv", "demangle.test(creal)"},
      {"_D8demangle4testFdZv", "demangle.test(double)"},
      {"_D8demangle4testFeZv", "demangle.test(real)"},
      {"_D8demangle4testFfZv", "demangle.test(float)"},
      {"_D8demangle4testFgZv", "demangle.test(byte)"},
      {"_D8demangle4testFhZv", "demangle.test(ubyte)"},
      {"_D8demangle4testFiZv", "demangle.test(int)"},
      {"_D8demangle4testFjZv", "demangle.test(ireal)"},
      {"_D8demangle4testFkZv", "demangle.test(uint)"},
      {"_D8demangle4testFlZv", "demangle.test(long)"},
      {"_D8demangle4testFmZv", "demangle.test(ulong)"},
      {"_D8demangle4testFnZv", "demangle.test(typeof(null))"},
      {"_D8demangle4testFNnZv", "demangle.test(typeof(*null))"},
      {"_D8demangle4testFoZv", "demangle.test(ifloat)"},
      {"_D8demangle4testFpZv", "demangle.test(idouble)"},
      {"_D8demangle4testFqZv", "demangle.test(cfloat)"},
      {"_D8demangle4testFrZv", "demangle.test(cdouble)"},
      {"_D8demangle4testFsZv", "demangle.test(short)"},
      {"_D8demangle4testFtZv", "demangle.test(ushort)"},
      {"_D8demangle4testFuZv", "demangle.test(wchar)"},
      {"_D8demangle4testFvZv", "demangle.test(void)"},
      {"_D8demangle4testFwZv", "demangle.test(dchar)"},
      {"_D8demangle4testFziZv", "demangle.test(cent)"},
      {"_D8demangle4testFzkZv", "demangle.test(ucent)"},
      {"_D8demangle4testFOaZv", "demangle.test(shared(char))"},
      {"_D8demangle4testFxaZv", "demangle.test(const(char))"},
      {"_D8demangle4testFyaZv", "demangle.test(immutable(char))"},
      {"_D8demangle4testFNgaZv", "demangle.test(inout(char))"},
      {"_D8demangle4testFOxaZv", "demangle.test(shared(const(char)))"},
      {"_D8demangle4testFONgaZv", "demangle.test(shared(inout(char)))"},
      {"_D8demangle4testFAaZv", "demangle.test(char[])"},
      {"_D8demangle4testFAAaZv", "demangle.test(char[][])"},
      {"_D8demangle4testFAAAaZv", "demangle.test(char[][][])"},
      {"_D8demangle4testFG42aZv", "demangle.test(char[42])"},
      {"_D8demangle4testFG42G42aZv", "demangle.test(char[42][42])"},
      {"_D8demangle4testFG42G42G42aZv", "demangle.test(char[42][42][42])"},
      {"_D8demangle4testFG1234567890aZv", "demangle.test(char[1234567890])"},
      {"_D8demangle4testFHaaZv", "demangle.test(char[char])"},
      {"_D8demangle4testFHHaaaZv", "demangle.test(char[char[char]])"},
      {"_D8demangle4testFPaZv", "demangle.test(char*)"},
      {"_D8demangle4testFPPaZv", "demangle.test(char**)"},
      {"_D8demangle4testFPPPaZv", "demangle.test(char***)"},
      {"_D8demangle4testFNhG8gZv", "demangle.test(__vector(byte[8]))"},
      {"_D8demangle4testFNhG16gZv", "demangle.test(__vector(byte[16]))"},
      {"_D8demangle4testFNhG32gZv", "demangle.test(__vector(byte[32]))"},
      {"_D8demangle4testFNhG4sZv", "demangle.test(__vector(short[4]))"},
      {"_D8demangle4testFNhG8sZv", "demangle.test(__vector(short[8]))"},
      {"_D8demangle4testFNhG16sZv", "demangle.test(__vector(short[16]))"},
      {"_D8demangle4testFNhG2iZv", "demangle.test(__vector(int[2]))"},
      {"_D8demangle4testFNhG4iZv", "demangle.test(__vector(int[4]))"},
      {"_D8demangle4testFNhG8iZv", "demangle.test(__vector(int[8]))"},
      {"_D8demangle4testFNhG1lZv", "demangle.test(__vector(long[1]))"},
      {"_D8demangle4testFNhG2lZv", "demangle.test(__vector(long[2]))"},
      {"_D8demangle4testFNhG4lZv", "demangle.test(__vector(long[4]))"},
      {"_D8demangle4testFNhG2fZv", "demangle.test(__vector(float[2]))"},
      {"_D8demangle4testFNhG4fZv", "demangle.test(__vector(float[4]))"},
      {"_D8demangle4testFNhG8fZv", "demangle.test(__vector(float[8]))"},
      {"_D8demangle4testFNhG1dZv", "demangle.test(__vector(double[1]))"},
      {"_D8demangle4testFNhG2dZv", "demangle.test(__vector(double[2]))"},
      {"_D8demangle4testFNhG4dZv", "demangle.test(__vector(double[4]))"},
      {"_D8demangle4testFC5classZv", "demangle.test(class)"},
      {"_D8demangle4testFC5class4testZv", "demangle.test(class.test)"},
      {"_D8demangle4testFS6structZv", "demangle.test(struct)"},
      {"_D8demangle4testFS6struct4testZv", "demangle.test(struct.test)"},
      {"_D8demangle4testFE4enumZv", "demangle.test(enum)"},
      {"_D8demangle4testFE4enum4testZv", "demangle.test(enum.test)"},
      {"_D8demangle4testFT7typedefZv", "demangle.test(typedef)"},
      {"_D8demangle4testFT7typedef4testZv", "demangle.test(typedef.test)"},
      {"_D8demangle4testFIaZv", "demangle.test(in char)"},
      {"_D8demangle4testFIKaZv", "demangle.test(in ref char)"},
      {"_D8demangle4testFJaZv", "demangle.test(out char)"},
      {"_D8demangle4testFKaZv", "demangle.test(ref char)"},
      {"_D8demangle4testFLaZv", "demangle.test(lazy char)"},
      {"_D8demangle4testFMaZv", "demangle.test(scope char)"},
      {"_D8demangle4testFNjaZv", "demangle.test(char)"},
      {"_D8demangle4testFNkaZv", "demangle.test(return char)"},
      {"_D8demangle4testFNlaZv", "demangle.test(char)"},
      {"_D8demangle4testFaXv", "demangle.test(char...)"},
      {"_D8demangle4testFaYv", "demangle.test(char, ...)"},
      {"_D8demangle4testFaaYv", "demangle.test(char, char, ...)"},
      {"_D8demangle4testFYv", "demangle.test(...)"},
      {"_D8demangle4testFaaZv", "demangle.test(char, char)"},
      {"_D8demangle4testFB0Zv", "demangle.test(Tuple!())"},
      {"_D8demangle4testFB1aZv", "demangle.test(Tuple!(char))"},
      {"_D8demangle4testFB2aaZv", "demangle.test(Tuple!(char, char))"},
      {"_D8demangle4testFB3aaaZv", "demangle.test(Tuple!(char, char, char))"},
      {"_D8demangle4testFB2OaaZv", "demangle.test(Tuple!(shared(char), char))"},
      {"_D8demangle4testFB3aDFZaaZv",
       "demangle.test(Tuple!(char, char() delegate, char))"},
      {"_D8demangle4testFDFZaZv", "demangle.test(char() delegate)"},
      {"_D8demangle4testFDUZaZv", "demangle.test(extern(C) char() delegate)"},
      {"_D8demangle4testFDWZaZv",
       "demangle.test(extern(Windows) char() delegate)"},
      {"_D8demangle4testFDVZaZv",
       "demangle.test(extern(Pascal) char() delegate)"},
      {"_D8demangle4testFDRZaZv", "demangle.test(extern(C++) char() delegate)"},
      {"_D8demangle4testFDYZaZv",
       "demangle.test(extern(Objective-C) char() delegate)"},
      {"_D8demangle4testFPFZaZv", "demangle.test(char() function)"},
      {"_D8demangle4testFPUZaZv", "demangle.test(extern(C) char() function)"},
      {"_D8demangle4testFPWZaZv",
       "demangle.test(extern(Windows) char() function)"},
      {"_D8demangle4testFPVZaZv",
       "demangle.test(extern(Pascal) char() function)"},
      {"_D8demangle4testFPRZaZv", "demangle.test(extern(C++) char() function)"},
      {"_D8demangle4testFPYZaZv",
       "demangle.test(extern(Objective-C) char() function)"},
      {"_D8demangle4testFDFNaZaZv", "demangle.test(char() pure delegate)"},
      {"_D8demangle4testFDFNbZaZv", "demangle.test(char() nothrow delegate)"},
      {"_D8demangle4testFDFNcZaZv", "demangle.test(char() ref delegate)"},
      {"_D8demangle4testFDFNdZaZv", "demangle.test(char() @property delegate)"},
      {"_D8demangle4testFDFNeZaZv", "demangle.test(char() @trusted delegate)"},
      {"_D8demangle4testFDFNfZaZv", "demangle.test(char() @safe delegate)"},
      {"_D8demangle4testFDFNiZaZv", "demangle.test(char() @nogc delegate)"},
      {"_D8demangle4testFDFNmZaZv", "demangle.test(char() @live delegate)"},
      {"_D8demangle4testFDFNaNbZaZv",
       "demangle.test(char() pure nothrow delegate)"},
      {"_D8demangle4testFDFNbNaZaZv",
       "demangle.test(char() nothrow pure delegate)"},
      {"_D8demangle4testFDFNdNfNaZaZv",
       "demangle.test(char() @property @safe pure delegate)"},
      {"_D8demangle4testFNjDFZaZv", "demangle.test(char() delegate)"},
      {"_D8demangle4testFNkDFZaZv", "demangle.test(return char() delegate)"},
      {"_D8demangle4testFDFNjZaZv", "demangle.test(char() return delegate)"},
      {"_D8demangle4testFNjNkDFNjZaZv",
       "demangle.test(return char() return delegate)"},
      {"_D8demangle4testFNlDFZaZv", "demangle.test(char() delegate)"},
      {"_D8demangle4testFMDFZaZv", "demangle.test(scope char() delegate)"},
      {"_D8demangle4testFDFNlZaZv", "demangle.test(char() scope delegate)"},
      {"_D8demangle4testFMDFNlZaZv",
       "demangle.test(scope char() scope delegate)"},
      {"_D8demangle4testFNlMDFNlZaZv",
       "demangle.test(scope char() scope delegate)"},
      {"_D8demangle4testFPFNaZaZv", "demangle.test(char() pure function)"},
      {"_D8demangle4testFPFNbZaZv", "demangle.test(char() nothrow function)"},
      {"_D8demangle4testFPFNcZaZv", "demangle.test(char() ref function)"},
      {"_D8demangle4testFPFNdZaZv", "demangle.test(char() @property function)"},
      {"_D8demangle4testFPFNeZaZv", "demangle.test(char() @trusted function)"},
      {"_D8demangle4testFPFNfZaZv", "demangle.test(char() @safe function)"},
      {"_D8demangle4testFPFNiZaZv", "demangle.test(char() @nogc function)"},
      {"_D8demangle4testFPFNmZaZv", "demangle.test(char() @live function)"},
      {"_D8demangle4testFPFNaNbZaZv",
       "demangle.test(char() pure nothrow function)"},
      {"_D8demangle4testFPFNbNaZaZv",
       "demangle.test(char() nothrow pure function)"},
      {"_D8demangle4testFPFNdNfNaZaZv",
       "demangle.test(char() @property @safe pure function)"},
      {"_D8demangle4testFNjPFZaZv", "demangle.test(char() function)"},
      {"_D8demangle4testFNkPFZaZv", "demangle.test(return char() function)"},
      {"_D8demangle4testFPFNjZaZv", "demangle.test(char() return function)"},
      {"_D8demangle4testFNjNkPFNjZaZv",
       "demangle.test(return char() return function)"},
      {"_D8demangle4testFNlPFZaZv", "demangle.test(char() function)"},
      {"_D8demangle4testFMPFZaZv", "demangle.test(scope char() function)"},
      {"_D8demangle4testFPFNlZaZv", "demangle.test(char() scope function)"},
      {"_D8demangle4testFMPFNlZaZv",
       "demangle.test(scope char() scope function)"},
      {"_D8demangle4testFNlMPFNlZaZv",
       "demangle.test(scope char() scope function)"},
      {"_D8demangle4test6__initZ", "initializer for demangle.test"},
      {"_D8demangle4test6__vtblZ", "vtable for demangle.test"},
      {"_D8demangle4test7__ClassZ", "ClassInfo for demangle.test"},
      {"_D8demangle4test11__InterfaceZ", "Interface for demangle.test"},
      {"_D8demangle4test12__ModuleInfoZ", "ModuleInfo for demangle.test"},
      {"_D8demangle4test6__ctorMFZv", "demangle.test.this()"},
      {"_D8demangle4test6__dtorMFZv", "demangle.test.~this()"},
      {"_D8demangle4test10__postblitMFZv", "demangle.test.this(this)"},
      {"_D8demangle4testFHAbaZv", "demangle.test(char[bool[]])"},
      {"_D8demangle4testFHG42caZv", "demangle.test(char[creal[42]])"},
      {"_D8demangle4testFAiXv", "demangle.test(int[]...)"},
      {"_D8demangle4testFLAiXv", "demangle.test(lazy int[]...)"},
      {"_D8demangle4testFAiYv", "demangle.test(int[], ...)"},
      {"_D8demangle4testFLAiYv", "demangle.test(lazy int[], ...)"},
      {"_D8demangle4testFLilZv", "demangle.test(lazy int, long)"},
      {"_D8demangle4testFLliZv", "demangle.test(lazy long, int)"},
      {"_D8demangle4testFLC6ObjectLDFLiZiZi",
       "demangle.test(lazy Object, lazy int(lazy int) delegate)"},
      {"_D8demangle9__T4testZv", "demangle.test!()"},
      {"_D8demangle9__U4testZv", "demangle.test!()"},
      {"_D8demangle11__T4testTaZv", "demangle.test!(char)"},
      {"_D8demangle13__T4testTaTaZv", "demangle.test!(char, char)"},
      {"_D8demangle15__T4testTaTaTaZv", "demangle.test!(char, char, char)"},
      {"_D8demangle16__T4testTaTOiTaZv",
       "demangle.test!(char, shared(int), char)"},
      {"_D8demangle17__T4testS6symbolZv", "demangle.test!(symbol)"},
      {"_D8demangle23__T4testS116symbol3fooZv", "demangle.test!(symbol.foo)"},
      {"_D8demangle32__T4testS20_D6symbol3foo3barFZvZv",
       "demangle.test!(symbol.foo.bar())"},
      {"_D8demangle19__T4testTaS6symbolZv", "demangle.test!(char, symbol)"},
      {"_D8demangle19__T4testS6symbolTaZv", "demangle.test!(symbol, char)"},
      {"_D8demangle12__T4testHTaZv", "demangle.test!(char)"},
      {"_D8demangle13__T4testVPinZv", "demangle.test!(null)"},
      {"_D8demangle15__T4testVgi123Zv", "demangle.test!(123)"},
      {"_D8demangle15__T4testVii123Zv", "demangle.test!(123)"},
      {"_D8demangle15__T4testVsi123Zv", "demangle.test!(123)"},
      {"_D8demangle15__T4testVhi123Zv", "demangle.test!(123u)"},
      {"_D8demangle15__T4testVki123Zv", "demangle.test!(123u)"},
      {"_D8demangle15__T4testVti123Zv", "demangle.test!(123u)"},
      {"_D8demangle15__T4testVli123Zv", "demangle.test!(123L)"},
      {"_D8demangle15__T4testVmi123Zv", "demangle.test!(123uL)"},
      {"_D8demangle15__T4testViN123Zv", "demangle.test!(-123)"},
      {"_D8demangle15__T4testVkN123Zv", "demangle.test!(-123u)"},
      {"_D8demangle15__T4testVlN123Zv", "demangle.test!(-123L)"},
      {"_D8demangle15__T4testVmN123Zv", "demangle.test!(-123uL)"},
      {"_D8demangle13__T4testVbi1Zv", "demangle.test!(true)"},
      {"_D8demangle13__T4testVbi0Zv", "demangle.test!(false)"},
      {"_D8demangle14__T4testVai10Zv", "demangle.test!('\\x0a')"},
      {"_D8demangle14__T4testVai32Zv", "demangle.test!(' ')"},
      {"_D8demangle14__T4testVai65Zv", "demangle.test!('A')"},
      {"_D8demangle15__T4testVai126Zv", "demangle.test!('~')"},
      {"_D8demangle16__T4testVui1000Zv", "demangle.test!('\\u03e8')"},
      {"_D8demangle18__T4testVwi100000Zv", "demangle.test!('\\U000186a0')"},
      {"_D8demangle17__T4testVde0A8P6Zv", "demangle.test!(0x0.A8p6)"},
      {"_D8demangle16__T4testVdeA8P2Zv", "demangle.test!(0xA.8p2)"},
      {"_D8demangle18__T4testVdeN0A8P6Zv", "demangle.test!(-0x0.A8p6)"},
      {"_D8demangle31__T4testVde0F6E978D4FDF3B646P7Zv",
       "demangle.test!(0x0.F6E978D4FDF3B646p7)"},
      {"_D8demangle15__T4testVdeNANZv", "demangle.test!(NaN)"},
      {"_D8demangle15__T4testVdeINFZv", "demangle.test!(Inf)"},
      {"_D8demangle16__T4testVdeNINFZv", "demangle.test!(-Inf)"},
      {"_D8demangle23__T4testVfe0FFFFFFP128Zv",
       "demangle.test!(0x0.FFFFFFp128)"},
      {"_D8demangle32__T4testVde0FFFFFFFFFFFFF8P1024Zv",
       "demangle.test!(0x0.FFFFFFFFFFFFF8p1024)"},
      {"_D8demangle19__T4testVfe08PN125Zv", "demangle.test!(0x0.8p-125)"},
      {"_D8demangle20__T4testVde08PN1021Zv", "demangle.test!(0x0.8p-1021)"},
      {"_D8demangle51__T4testVrc0C4CCCCCCCCCCCCCDP4c0B666666666666666P6Zv",
       "demangle.test!(0x0.C4CCCCCCCCCCCCCDp4+0x0.B666666666666666p6i)"},
      {"_D8demangle52__T4testVrcN0C4CCCCCCCCCCCCCDP4c0B666666666666666P6Zv",
       "demangle.test!(-0x0.C4CCCCCCCCCCCCCDp4+0x0.B666666666666666p6i)"},
      {"_D8demangle91__"
       "T4testVde000111222333444555666777888999AAABBBCCCDDDEEEFFFP0001112223334"
       "44555666777888999Zv",
       "demangle.test!(0x0."
       "00111222333444555666777888999AAABBBCCCDDDEEEFFFp00011122233344455566677"
       "7888999)"},
      {"_D8demangle22__T4testVG3ua3_616263Zv", "demangle.test!(\"abc\")"},
      {"_D8demangle22__T4testVG3ud3_616263Zv", "demangle.test!(\"abc\"d)"},
      {"_D8demangle22__T4testVG3uw3_616263Zv", "demangle.test!(\"abc\"w)"},
      {"_D8demangle16__T4testVAyaa0_Zv", "demangle.test!(\"\")"},
      {"_D8demangle32__T4testVAyaa8_20090a0d0c0b00ffZv",
       "demangle.test!(\" \\t\\n\\r\\f\\v\\x00\\xff\")"},
      {"_D8demangle22__T4testVAiA4i1i2i3i4Zv", "demangle.test!([1, 2, 3, 4])"},
      {"_D8demangle25__T4testVAdA2e08P1eN08P1Zv",
       "demangle.test!([0x0.8p1, -0x0.8p1])"},
      {"_D8demangle23__T4testVHiiA2i1i2i3i4Zv", "demangle.test!([1:2, 3:4])"},
      {"_D8demangle39__T4testVHAxaiA2a3_616263i1a3_646566i2Zv",
       "demangle.test!([\"abc\":1, \"def\":2])"},
      {"_D8demangle28__T4testVS8demangle1SS2i1i2Zv",
       "demangle.test!(demangle.S(1, 2))"},
      {"_D8demangle35__T4testVS8demangle1SS2i1a3_616263Zv",
       "demangle.test!(demangle.S(1, \"abc\"))"},
      {"_D8demangle13__T4testTFZaZ6mangleFZv",
       "demangle.test!(char() function).mangle()"},
      {"_D8demangle4testMxFZv", "demangle.test() const"},
      {"_D8demangle4testMyFZv", "demangle.test() immutable"},
      {"_D8demangle4testMNgFZv", "demangle.test() inout"},
      {"_D8demangle4testMNgxFZv", "demangle.test() inout const"},
      {"_D8demangle4testMOFZv", "demangle.test() shared"},
      {"_D8demangle4testMOxFZv", "demangle.test() shared const"},
      {"_D8demangle4testMONgFZv", "demangle.test() shared inout"},
      {"_D8demangle4testMONgxFZv", "demangle.test() shared inout const"},
      {"_D8demangle4testFDxFZaZv", "demangle.test(char() delegate const)"},
      {"_D8demangle4testFDyFZaZv", "demangle.test(char() delegate immutable)"},
      {"_D8demangle4testFDNgFZaZv", "demangle.test(char() delegate inout)"},
      {"_D8demangle4testFDNgxFZaZv",
       "demangle.test(char() delegate inout const)"},
      {"_D8demangle4testFDOFZaZv", "demangle.test(char() delegate shared)"},
      {"_D8demangle4testFDOxFZaZv",
       "demangle.test(char() delegate shared const)"},
      {"_D8demangle4testFDONgFZaZv",
       "demangle.test(char() delegate shared inout)"},
      {"_D8demangle4testFDONgxFZaZv",
       "demangle.test(char() delegate shared inout const)"},
      {"_D8demangle004testFaZv", "demangle.test(char)"},
      {"_D8demangle000000004testFaZv", "demangle.test(char)"}};

  for (ExpectedVal Val : ExpectedArray) {
    char *Demangled = llvm::dlangDemangle(Val.Mangled);
    EXPECT_STREQ(Demangled, Val.Expected);
    std::free(Demangled);
  }
}
